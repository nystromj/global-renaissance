<!doctype html>
<html>

<head>
    <title>New Map Thing</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <!-- Styles -->
    <link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
    <!-- Scripts External -->
    <script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
    <script src="http://d3js.org/d3.v3.js"></script>
    <!-- Scripts Local -->
    <script src="js/jquery.panzoom.min.js"></script>
    <script src="js/jquery.mousewheel.js"></script>
    <script src="js/draggable.min.js"></script>
    <style type="text/css">
        body {
            background-color: #333;
            font-family: 'Open Sans', sans-serif;
            margin: 0;
            padding: 0;
        }
        .parent {
            width: 100%;
        }
        #renMap {
            /*            width: 900px;*/
        }
        #main-panel {
            position: relative;
        }
        /* Menu Bar */
        #left-bar {
            background-color: #333;
            margin: 0;
            padding: 0;
            width: 50px;
        }
        #left-bar-menu {
            margin: 0;
            padding: 0;
            position: fixed;
            top: 0;
        }
        #left-bar-menu li {
            border-bottom: 1px solid #dedede;
            list-style: none;
            width: 50px;
            text-align: center;
            padding: 8px 0;
            font-size: 22px
        }
        #left-bar-menu li a {
            text-decoration: none;
            color: #dedede;
        }
        .left-menu-info {
            position: absolute;
            left: 70px;
            background-color: #fff;
            display: none;
            color: #efefef;
            font-size: 16px;
            padding: 14px 20px;
            background-color: rgb(118, 194, 187);
            z-index: 9999;
        }
        #left-menu-brand-text {
            -webkit-transform: rotate(-90deg);
            -moz-transform: rotate(-90deg);
            -ms-transform: rotate(-90deg);
            -o-transform: rotate(-90deg);
            transform: rotate(-90deg);
            /* also accepts left, right, top, bottom coordinates; not required, but a good idea for styling */
            /* Should be unset in IE9+ I think. */
            filter: progid: DXImageTransform.Microsoft.BasicImage(rotation=3);
            margin-top: 150px;
            margin-bottom: 30px;
            font-size: 14px;
        }
        #left-menu-brand {}
        /* Visualization Style */
        .chart text,
        text {
            fill: white;
            font: 10px sans-serif;
            text-anchor: end;
        }
        rect {
            fill: steelblue;
        }
        text .label {
            fill: black;
            text-align: center;
        }
        .info {
            display: none;
        }
        .year-density {
            float: left;
        }
        /* Data Popups */
        #popup,
        #words-popup,
        #years-popup {
            background-color: #CED0CD;
            width: 500px;
            /* 400px + 80px for label + 20 for padding! */
            font-weight: 600;
            z-index: 99;
            display: none;
        }
        .words-content {
            /*
            max-height: 300px;
            overflow: hidden;   
*/
            max-height: 600px;
            overflow-y: scroll !important;
        }
        /* Popup Positions */
        #popup {
            position: absolute;
            left: 30px;
            top: 15px;
        }
        #years-popup {
            position: absolute;
            z-index: 999;
            left: 30px;
            top: 330px;
        }
        #words-popup {
            position: absolute;
            left: 550px;
            top: 15px;
            z-index: 999;
        }
        .popup-title,
        .popup-content,
        .popup-footer {
            padding: 5px 0 5px 10px;
        }
        /*
        #popup-content,
        #popup-footer {
            color: #5F6463;
            font-size: 15px;
        }
*/
        #popup-footer {
            border-top: 1px solid #BFC1BE;
            padding: 10px 0 0 10px;
        }
        .pop-title {
            /*            background-color: #1485CC;*/
            background-color: steelblue;
            /* matches bar graphs */
            color: #fff;
            font-weight: 300;
            padding: 8px 12px;
            font-size: 18px;
            margin-bottom: 10px;
            cursor: move;
        }
        .word {} .year {} .marker {
            position: absolute;
        }
        .marker:hover {
            cursor: pointer
        }
        .marker-img {
            width: 28px;
            height: 28px;
        }
        .show-word {
            display: block;
        }
    </style>
</head>

<body>

    <section id="focal">
        <div class="parent" style="position:relative">
            <div class="container-fluid" style="padding:0;">
                <div class="row-fluid">
                    <div id="left-menu-info-home" class="left-menu-info">Renaissance Map</div>
                    <div id="left-menu-info-book" class="left-menu-info">View Data</div>
                    <div id="left-bar" class="col-xs-1">
                        <ul id="left-bar-menu">
                            <li id="left-menu-brand">
                                <a href="#" data-item="home" class="left-menu-item">
                                    <div id="left-menu-brand-text">GlobalRenaissanceProject</div>
                                </a>
                            </li>

                            <li>
                                <a href="/map" data-item="home" class="left-menu-item">
                                    <span class="glyphicon glyphicon-map-marker"></span>
                                    </span>
                                </a>
                            </li>
                            <li>
                                <a href="#" data-item="book" class="left-menu-item">
                                    <span class="glyphicon glyphicon-book"></span>
                                    </span>
                                </a>
                            </li>


                        </ul>
                        <div class="clearfix"></div>
                    </div>

                    <div id="main-panel" class="" style="padding-left:0;">
                        <div id="popup" class="popup">
                            <div class="pop-title">
                                <span class="glyphicon glyphicon-globe" style="margin-right:5px"></span>
                                <span id="pop-title-text"></span>
                            </div>
                            <div id="popup-content" class="popup-content">
                                <p>Loading data...</p>
                            </div>
                            <div id="popup-footer">
                                <p>Click on a category's bar to see individual words</p>
                            </div>
                        </div>

                        <div id="words-popup" class="popup">
                            <div class="pop-title">Words</div>
                            <div class="words-content popup-content"></div>
                        </div>

                        <div id="years-popup" class="popup">
                            <div class="pop-title">Years</div>
                            <div class="years-content popup-content"></div>
                        </div>

                        <div class="panzoom">
                            <div id="renMap">

                                <img id="renImage" src="/img/renMap.png">
                            </div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>


        </div>
        <script>
            jQuery(document).ready(function($) {
                /*
                 * Get width of window
                 */


                var screenWidth = $(window).width();
                var mapWidth = screenWidth - 50;
                var mapHeight = Math.round(mapWidth * 0.7718224);
                console.log("Map height: " + mapHeight);
                console.log("Map width: " + mapWidth);
                console.log("screen: " + screenWidth);
                console.log("map: " + mapWidth);
                $('#renImage, #main-panel #renMap, .panzoom')
                    .css('width', mapWidth);


                /*
                 * Popup - draggability, etc.
                 */
                var popup = document.getElementById('popup');
                var draggie = new Draggabilly(popup, {
                    containment: '#main-panel',
                    handle: '.pop-title'
                });
                // Words popup
                var popupWords = document.getElementById('words-popup');
                var draggie = new Draggabilly(popupWords, {
                    containment: '#main-panel',
                    handle: '.pop-title'
                });
                // Years popup
                var popupYears = document.getElementById('years-popup');
                var draggie = new Draggabilly(popupYears, {
                    containment: '#main-panel',
                    handle: '.pop-title'
                });

                function hidePopups() {
                    $('.popup').hide();
                } // hidePopups()

                /*
                 * Markers for map
                 */
                var markers = [{
                    "name": "Egypt",
                    "top": 265,
                    "left": 565
                }, {
                    "name": "England",
                    "top": 185,
                    "left": 520
                }, {
                    "name": "France",
                    "top": 200,
                    "left": 520
                }, {
                    "name": "America",
                    "top": 230,
                    "left": 215
                }, {
                    "name": "Virginia",
                    "top": 232,
                    "left": 255
                }, {
                    "name": "Japan",
                    "top": 215,
                    "left": 755
                }, {
                    "name": "Korea",
                    "top": 225,
                    "left": 730
                }, {
                    "name": "Portugal",
                    "top": 205,
                    "left": 498
                }, {
                    "name": "Spain",
                    "top": 215,
                    "left": 508
                }, {
                    "name": "Moor",
                    "top": 245,
                    "left": 490
                }, {
                    "name": "China",
                    "top": 235,
                    "left": 700
                }, {
                    "name": "India",
                    "top": 280,
                    "left": 660
                }, {
                    "name": "Turk",
                    "top": 238,
                    "left": 575
                }];
                var markerWrap, markerImg, markerTop, markerLeft;
                var originalMapWidth = 845; // just what I used.
                var originalMapHeight = 640;
                console.log("Map height: " + mapHeight);
                for (var i = 0; i < markers.length; i++) {
                    markerWrap = document.createElement('div');
                    markerWrap.className = 'marker';
                    $(markerWrap).attr('data-country', markers[i].name);


                    markerLeft = Math.round((markers[i].left / originalMapWidth) *
                        mapWidth);
                    markerTop = Math.round((markers[i].top / originalMapHeight) *
                        mapHeight);
                    console.log("left: " + markerLeft);
                    $(markerWrap).css({
                        "top": markerTop,
                        "left": markerLeft
                    });
                    markerImg = document.createElement('img');
                    markerImg.src = '/img/mapMarker.png';
                    markerImg.className = "marker-img";
                    markerWrap.appendChild(markerImg);
                    document.getElementById('renMap').appendChild(markerWrap);

                    //addTooltips();
                } // for


                /*
                 * Map
                 */
                var $section = $('#focal');
                var $panzoom = $section.find('.panzoom').panzoom();
                // 
                //Zoom and play
                $panzoom.parent().on('mousewheel.focal', function(e) {
                    e.preventDefault();
                    var delta = e.delta || e.originalEvent.wheelDelta;
                    var zoomOut = delta ? delta < 0 : e.originalEvent.deltaY > 0;
                    $.when($panzoom.panzoom('zoom', zoomOut, {
                        increment: 0.1,
                        animate: false,
                        focal: e,
                        minScale: 1,
                        maxScale: 5,

                    })).then(function() {
                        addTooltips();
                    });

                });

                /*
                 * Information popups for markers
                 * Displays the country name on hover
                 * Needs to be a function because rerendered on zoom.
                 */
                function addTooltips() {
                    var markerTitle;
                    $('.marker').each(function() {
                        markerTitle = $(this).attr('data-country');
                        $(this).attr('data-toggle', 'tooltip');
                        $(this).attr('data-placement', 'top');
                        $(this).attr('title', markerTitle);
                        $(this).tooltip();
                    }); // each
                } // addToolTips

                /*
                 * Click handler for map
                 */
                $('#renMap').click(function(e) {
                    if (e.target.className != 'marker-img') {
                        hidePopups();
                    } // if
                    //console.log(e.target);
                });

                /*
                 * Left menu bar
                 */
                $('a.left-menu-item').mouseover(function() {
                    var posY = $(this).offset().top;
                    var item = $(this).attr('data-item');
                    $('#left-menu-info-' + item)
                        .css({
                            'top': posY - 10
                        })
                        .show();
                    $('#left-menu-info-' + item).animate({
                        'left': 50
                    }, 80);

                }).mouseout(function() {
                    $('.left-menu-info').hide().css('left', 70);
                });

                /*
                 * Map markers
                 */
                $('.marker').click(function(e) {
                    e.preventDefault();
                    var country = $(this).attr('data-country');
                    console.log(country);


                    var posX = $(this).offset().left;
                    var posY = $(this).offset().top;
                    $panzoom.panzoom("zoom", 3, {
                        animate: true
                    }).panzoom("pan", -posX + 250, -posY + 430, {
                        relative: true,
                        animate: true,
                    });

                    // Hide any active popups
                    $('.popup').hide();
                    // Show the popup
                    makeViz(country);

                    $('#popup #pop-title-text')
                        .text("Categories of Words Used Alongside '" + country + "'");
                    $('#popup').show();

                });

                var categories = ["race", "measurements",
                    "culture", "proper-nouns",
                    "religion", "economics",
                    "verbs", "geography",
                    "politics"
                ];

                var buckets = [1500, 1525, 1550, 1575, 1600,
                    1625, 1650, 1675, 1700, 1725
                ];

                var margin = {
                    top: 0,
                    right: 50,
                    bottom: 0,
                    left: 80 // margin for the label
                },
                    width = 400,
                    barHeight = 20;

                function addScrollButtons() {
                    $('.words-content').append('<a href="#" class="words-scroll words-scroll-down" style="position:absolute;bottom:10px;right:10px;"><span class="glyphicon glyphicon-chevron-down"></span></a>');
                    $('.words-content').append('<a href="#" class="words-scroll words-scroll-up" style="position:absolute;top:50px;right:10px;"><span class="glyphicon glyphicon-chevron-up"></span></a>');

                    $('.words-scroll-down').click(function(e) {
                        e.preventDefault();
                        var curMarginTop;
                        console.log("margin: " + curMarginTop);
                        $('.words-content .info').each(function() {
                            curMarginTop = $(this).css("marginTop").split("px");
                            curMarginTop = curMarginTop[0];
                            $(this)
                                .css("marginTop", curMarginTop - 10);


<<<<<<< HEAD
=======
                    d3.json("data/global-renaissance-map/" + countryName + ".json", function(error, data) {

                        function makeBarGraph(entries, selection, accessor, text) {
                            var x = d3.scale.linear()
                                .domain([0, d3.max(entries, function(d) {
                                    return eval(accessor);
                                })])
                                .range([0, width]);
                            
                            var chart = selection.append("svg")
                                .attr("width", width + margin.left + margin.right)
                                .attr("height", barHeight * entries.length +
                                    margin.top + margin.bottom)
                                .append("g")
                                .attr("transform", "translate(0," + margin.top + ")");

                            var bar = chart.selectAll("g")
                                .data(entries)
                                .enter().append("g")
                                .attr("transform", function(d, i) {
                                    return "translate(0," + i * barHeight + ")";
                                });

                            bar.append("rect")
                                .attr("x", margin.left)
                                .attr("width", function(d) {
                                    return x(eval(accessor))
                                })
                                .attr("height", barHeight - 1);

                            bar.append("text")
                                .attr("x", 0)
                                .attr("y", barHeight / 2)
                                .attr("dy", ".35em")
                                .style("fill", "black")
                                .style("text-anchor", "start")
                                .text(function(d, i) {
                                    return d.key;
                                });

                            bar.append("text")
                                .attr("x", function(d) {
                                    return x(eval(accessor)) + margin.left - 3;
                                })
                                .attr("y", barHeight / 2)
                                .attr("dy", ".35em")
                            //.style("fill", "black")
                            .text(text);
                        }
                        // Clear the popup's current content
                        var popupContent = document.getElementById('popup-content');
                        popupContent.innerHTML = '';

                        var chart = d3.select("#popup-content");
                        var scores = d3.entries(data);
                        makeBarGraph(scores, chart, "d.value.score", function(d) {
                            return d.value.score;
>>>>>>> ba9fb524b188d5f24e0dcaf3468e5024319bc57e
                        });
                    });
                    $('.words-scroll-up').click(function(e) {
                        e.preventDefault();
                        var curMarginTop;
                        console.log("margin: " + curMarginTop);
                        $('.words-content .info').each(function() {
                            curMarginTop = $(this).css("marginTop").split("px");
                            curMarginTop = curMarginTop[0];
                            $(this)
                                .css("marginTop", curMarginTop + 10);


                        });
                    });
                } // addScrollButtons()

                function makeViz(countryName) {
                    // Get JSON Data for the country
                    d3.json("data/" + countryName +
                        ".json", function(error, data) {

                            /* makeBarGraph takes a set of data, 
                             * a d3 selection from the document,
                             * and two strings to produce the bar charts
                             * in the visualization */
                            function makeBarGraph(entries, selection,
                                accessor, text) {

                                /* create the scale, making the max value of
                                 * entries the max of the domain
                                 */
                                var x = d3.scale.linear()
                                    .domain([0, d3.max(entries, function(d) {
                                        return eval(accessor);
                                    })])
                                    .range([0, width - margin.right]);

                                // append the chart frame to the selection
                                var chart = selection.append("svg")
                                    .attr("width", width + margin.left +
                                        margin.right)
                                    .attr("height", barHeight * entries.length +
                                        margin.top + margin.bottom)
                                    .append("g")
                                    .attr("transform", "translate(0," +
                                        margin.top + ")");

                                /* for each data point create a g element 
                                 * that will contain the bar and labels
                                 */
                                var bar = chart.selectAll("g")
                                    .data(entries)
                                    .enter().append("g")
                                    .attr("transform", function(d, i) {
                                        return "translate(0," + i * barHeight + ")";
                                    });
                                /* 
                                 * append the rectangle with a width
                                 * equal to the current data value
                                 */
                                bar.append("rect")
                                    .attr("x", margin.left)
                                    .attr("width", function(d) {
                                        return x(eval(accessor))
                                    })
                                    .attr("height", barHeight - 1);

                                bar.append("text")
                                    .attr("x", 0)
                                    .attr("y", barHeight / 2)
                                    .attr("dy", ".35em")
                                    .style("fill", "black")
                                    .style("text-anchor", "start")
                                    .text(function(d, i) {
                                        return d.key;
                                    });

                                bar.append("text")
                                    .attr("x", function(d) {
                                        var evaluated = eval(text);
                                        return x(eval(accessor)) +
                                            margin.left +
                                            (evaluated.toString().length * 5) + 5;
                                    })
                                    .attr("y", barHeight / 2)
                                    .attr("dy", ".35em")
                                    .style('fill', 'black')
                                    .text(function(d) {
                                        var txt = eval(text);
                                        return txt;
                                    });
                            }
                            // Clear the popup's current content
                            var popupContent = document.getElementById('popup-content');
                            popupContent.innerHTML = '';

                            var chart = d3.select("#popup-content");
                            var scores = d3.entries(data);
                            makeBarGraph(scores, chart, "d.value.score", "d.value.score");
                            // append graphs for each category
                            $('.words-content').html('');

                            // append scroll buttons
                            addScrollButtons();
                            for (var key in data) {
                                // Add action listener
                                chart.selectAll("g").on("click", function(d, i) {
                                    // Make a pretty version of the title
                                    var title = d.key;
                                    title = title.charAt(0)
                                        .toUpperCase() +
                                        title.substring(1, title.length);

                                    if (d !== undefined) { // why would d be undefined?
                                        showWords(d.key.replace(" ", "-"));
                                    } // if

                                    // Set the title of the popup
                                    $('#words-popup .pop-title')
                                        .text("Words and Distributions in " +
                                            title);
                                    $('#years-popup .pop-title')
                                        .text("Distribution of Use Over Time");

                                    /*
                                     * Reset the margin top,
                                     * which changes on scrolling
                                     */
                                    $('.words-content .info').css('margin-top', 0);
                                    // Show the popups
                                    $('#words-popup').show();
                                    $('#years-popup').show();
                                }); // .selectAll

                                // Append Words

                                var wordsContent = d3.select(".words-content");
                                var listGraph = wordsContent.append("div")
                                    .attr("class", "info " +
                                        key.replace(" ", "-") + " word");
                                // grab the entries in the list
                                var entries = d3.entries(data[key].list);
                                makeBarGraph(entries, listGraph, "d.value", "d.value");
                                // Gather year data into buckets
                                var newData = {};
                                for (var index in buckets) {
                                    bucket = "" + buckets[index];
                                    newData[bucket] = data[key].years[bucket];
                                } // for

                                // Append Years
                                var yearsContent = d3.select(".years-content");
                                var yearGraph = yearsContent.append("div")
                                    .attr("class", "info " +
                                        key.replace(" ", "-") + " year");
                                // get year entries
                                var years = d3.entries(newData);

                                makeBarGraph(years, yearGraph, "d.value", "(d.value / data[key].years['total'] * 100).toFixed(2)");
                            } // for
                        });
                } // makeViz ()

                var getNext = function(elm, arr) {
                    var current = arr.indexOf(elm);
                    if (current == arr.length - 1) {
                        return arr[0];
                    } else return arr[current + 1];
                }

                var getPrev = function(elm, arr) {
                    var current = arr.indexOf(elm);
                    console.log(current);
                    if (current == 0) {
                        return arr[arr.length - 1];
                    } else return arr[current - 1];
                }

                var showWords = function(cat) {
                    $(".info").removeClass("show-word");
                    $("." + cat).addClass("show-word");
                    console.log($(".show-word svg").attr("height"));
                    if ($(".show-word svg").attr("height") > 580) {
                        $('.words-scroll').show();
                    } else {
                        $('.words-scroll').hide();
                    } // else
                } //showWords()
            });
        </script>
    </section>
</body>

</html>